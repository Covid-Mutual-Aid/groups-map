service:
  name: lambdas
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  DYNAMODB_TABLE: ${self:provider.stage}-groups
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.DYNAMODB_TABLE}
            sources: [./migrations/groups-seed.json]
  serverless-offline:
    httpPort: 4000
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'eu-west-2'}
  stage: ${opt:stage, 'dev'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMODB_TABLE: ${self:custom.DYNAMODB_TABLE}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.DYNAMODB_TABLE}'

functions:
  groups:
    handler: handler.groups
    events:
      - http:
          method: get
          path: groups
          cors: true

  createGroup:
    handler: handler.createGroup
    events:
      - http:
          method: post
          path: createGroup
          cors: true

  getGroup:
    handler: handler.getGroup
    events:
      - http:
          method: post
          path: getGroup
          cors: true

  deleteGroup:
    handler: handler.deleteGroup
    events:
      - http:
          method: post
          path: deleteGroup
          cors: true

  updateGroup:
    handler: handler.updateGroup
    events:
      - http:
          method: post
          path: updateGroup
          cors: true

resources:
  Resources:
    ExportDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.DYNAMODB_TABLE}
